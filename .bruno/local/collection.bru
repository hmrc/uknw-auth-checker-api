headers {
  X-Correlation-Id: {{correlationId}}
}

vars:pre-request {
  invalidEoris: JsdbuwnNN%$400
}

script:pre-request {
  const axios = require("axios");
  
  const clientId = 'd5f3e2ed-7346-4b02-9efb-f48593407810';
  const authProvider = 'StandardApplication';
  const applicationId = '87d4dd99-a550-4fe5-90e4-a3d544fa82c8';
  const applicationName = 'uknw-auth-checker-api';
  const ttl = 5000;
  
  function uuidv4() {
      var d = new Date().getTime();
      var d2 = ((typeof performance !== 'undefined') && performance.now && (performance.now()*1000)) || 0;
      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
          var r = Math.random() * 16;
          if(d > 0){
              r = (d + r)%16 | 0;
              d = Math.floor(d/16);
          } else {
              r = (d2 + r)%16 | 0;
              d2 = Math.floor(d2/16);
          }
          return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);
      });
  }
  
  const response = await axios.post(
    "http://localhost:8585/application/session/login",
    {
      clientId: clientId,
      authProvider: authProvider,
      applicationId: applicationId,
      applicationName: applicationName,
      enrolments: [],
      ttl: ttl
    }
  );
  
  bru.setEnvVar('bearerToken', response.headers.get('authorization'));
  bru.setEnvVar('correlationId', uuidv4());
}

script:post-response {
  const bearerTokenKey = 'bearerToken';
  
  bru.setEnvVar(bearerTokenKey, '');
  
  var correlationId = bru.getEnvVar('correlationId');
  if (correlationId) {
    bru.setEnvVar('correlationId', '');
  }
}
