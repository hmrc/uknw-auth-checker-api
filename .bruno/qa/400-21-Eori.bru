meta {
  name: 400-21-Eori
  type: http
  seq: 14
}

post {
  url: {{apiEndpoint}}
  body: json
  auth: none
}

headers {
  Accept: application/vnd.hmrc.1.0+json
  Authorization: Bearer {{bearerToken}}
  X-Correlation-Id: {{correlationId}}
}

body:json {
  {
    "eoris": [
      "GB473815539404392",
      "GB837826880909874",
      "XI968840631629",
      "XI436105828614",
      "XI670738444417",
      "XI299090776708",
      "XI991478748583180",
      "GB664747832914",
      "GB845942880618380",
      "GB698422523946525",
      "XI424550299466",
      "GB944107196831",
      "XI876202322763652",
      "XI954761792185551",
      "XI705873897754",
      "XI030464530763",
      "GB138229072434544",
      "XI561521218783",
      "XI699827953498",
      "GB431532672087862",
      "XI640240976078"
    ]
  }
}

assert {
  res.status: eq 400
  res.body.code: eq "BAD_REQUEST"
  res.body.message: eq Bad request
}

tests {
  
  const error_code = 'INVALID_FORMAT';
  const error_message ="The request payload must contain between 1 and 20 EORI entries";
  const error_path = "eoris";
  const data = res.getBody();
  
  test(`res.body.errors.code: eq ${error_code}`, function() {
      expect(data.errors[0].code).to.equal(error_code);
  });
  
  test(`res.body.errors.
  message: eq ${error_message}`, function(){
       expect(data.errors[0].message).to.equal(error_message);
  });
  
  test(`res.body.errors.path: eq ${error_path}`, function() {
      expect(data.errors[0].path).to.equal(error_path);
  });
}
