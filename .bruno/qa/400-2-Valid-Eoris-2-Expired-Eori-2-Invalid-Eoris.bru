meta {
  name: 400-2-Valid-Eoris-2-Expired-Eori-2-Invalid-Eoris
  type: http
  seq: 12
}

post {
  url: {{apiEndpoint}}
  body: json
  auth: none
}

headers {
  Accept: application/vnd.hmrc.1.0+json
  Authorization: Bearer {{bearerToken}}
  X-Correlation-Id: {{correlationId}}
}

body:json {
  {
    "eoris": [
      "GB567891011121",
      "GB567891011122",
      "GB567891011153",
      "GB567891011154",
      "GBXX567891011153",
      "GBZZ567891011153"
    ]
  }
}

assert {
  res.status: eq 400
  res.body.code: eq "BAD_REQUEST"
  res.body.message: eq "Bad request"
}

tests {
  
  const error_code = 'INVALID_FORMAT';
  var invalidEoris = 'GBXX567891011153';
  var invalidEoris2 = "GBZZ567891011153";
  var error_message = " is not a supported EORI number";
  const error_path = "eoris";
  const data = res.getBody();
  
  test(`res.body.errors.code: eq ${error_code}`, function() {
      expect(data.errors[0].code).to.equal(error_code);
      expect(data.errors[1].code).to.equal(error_code);
    
  });
  
  test(`res.body.errors.
  message: eq ${invalidEoris2} / ${invalidEoris} ${error_message}`, function(){
       expect(data.errors[0].message).to.equal(invalidEoris + error_message);
  
    expect(data.errors[1].message).to.equal(invalidEoris2 + error_message)
  });
  
  test(`res.body.errors.path: eq ${error_path}`, function() {
      expect(data.errors[0].path).to.equal(error_path);
     expect(data.errors[1].path).to.equal(error_path);
  });
  test(`should have 2 error results`, function() {
   
     expect(data.errors).to.be.an('array').that.has.lengthOf(2);
  });
}
